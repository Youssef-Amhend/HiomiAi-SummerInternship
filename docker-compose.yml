version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: LISTENER_DOCKER://:29092,LISTENER_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER://kafka:29092,LISTENER_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER:PLAINTEXT,LISTENER_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "9080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: docker_local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  # MinIO Object Storage
  minio:
    image: minio/minio:RELEASE.2022-12-12T19-27-27Z
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # API Port
      - "9001:9001" # Console Port
    environment:
      MINIO_ROOT_USER: murmax
      MINIO_ROOT_PASSWORD: rootroot
    volumes:
      - ./minio-data:/data
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: postgress
    environment:
      - POSTGRES_USER=ADMIN
      - POSTGRES_PASSWORD=ADMIN
    volumes:
      # This saves the database data to a 'postgres-data' folder
      - ./data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  pgadmin:
    container_name: container-pgadmin
    image: dpage/pgadmin4:latest
    ports:
      - "8087:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    restart: unless-stopped
    networks:
      - app-network

  # Redis Cache & Queue
  cache:
    image: redis:7
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped

  # ML Service
  ml-service:
    build: ./ml-service
    container_name: ml-service
    ports:
      - "8000:8000"
    environment:
      - APP_HOST=0.0.0.0
      - APP_PORT=8000
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY=murmax
      - S3_SECRET_KEY=rootroot
      - S3_REGION=us-east-1
      - S3_BUCKET=s3bucket
      - S3_USE_SSL=false
      - MODEL_PATH=resnet18_pneumonia_best.pth
    volumes:
      - ./ml-service:/app
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - minio

  # Upload MinIO Service
  upload-service:
    build: ./upload_minio-service
    container_name: upload-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - minio
      - ml-service

  # Results Service
  results-service:
    build: ./results-service
    container_name: results-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - ml-service

# Define the shared network
networks:
  app-network:
    driver: bridge
